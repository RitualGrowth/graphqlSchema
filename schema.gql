scalar Date

type ProjectSummary {
	projectID: ID!
	durationInfo: DurationInfo
	cohortsSummary: [CohortSummary]
}

type CohortSummary {
	cohortID: ID!
	durationInfo: DurationInfo
	numberOfUsers: Int!
	stagesSummary: [StageSummary]
}

type StageSummary {
	stageID: ID!
	durationInfo: DurationInfo
	statisticsInfo: StatisticsInfo
}

type ProjectFlowStageStats {
	projectID: ID!
	durationInfo: DurationInfo
	numberOfCohorts: Int!
	status: Status
	flowsRun: [FlowRun]
}

type CohortFlowStats {
	flowType: FlowType
	projectID: ID!
	cohortID: ID!
	stageID: ID!
	durationInfo: DUrationInfo
	statisticsInfo: StatisticsInfo
	stageInfos: [StageInfo]
}

type CohortStageStats {
	cohortInfo: CohortInfo
	durationInfo: DurationInfo
	overallStatus: OverallStatusInfo
	goalInfo: GoalInfo
	statisticsInfo: StatisticsInfo
	usersStageInfos: UsersStageInfo
	userStageInfoLink: String!
}

type OverallStatusInfo {
	cohortInfo: CohortInfo
	durationInfo: DurationInfo
	statisticsInfo: StatisticsInfo
	userStageInfos: [UserStageInfo]
}

# What did all users do in one stage
# for all user in one view (screen or web page) in one flow, column view
type UsersStageInfo {
	cohortInfo: CohortInfo
	durationInfo: DurationInfo
	statisticsInfo: StatisticsInfo
	userStageInfo: [UserStageInfo]
}

# for one user and one view (screen or web page)
type UserStageInfo {
	stageInfo: StageInfo
	duration: DurationInfo
	goalInfo: GoalInfo
	viewInfo: [ViewInfo]
}

type ViewInfo {
	view: View
	visits: [VisitsInfo]
	overallDuration: DateTimeInfo
	goalInfo: GoalInfo
}

# VisitInfo tracks the visits to a View
# Use to create a graph view of the user path through the app
type VisitsInfo {
	componentInfos: [ComponentInfo]
	duration: DateTimeInfo
}

# ComponentInfo tracks the user interaction with a component in a view
type ComponentInfo {
	view: View
	componentID: ID! # this is the ID assigned to the component by the app
	duration: DateTimeInfo
	componentType: ComponentType
	action: String # What did the user do? E.g. pressed a button, selected a particular radio button, pressed a link
	nextView: View # if they exited the view from this component where did they go, the graph edge.
	# Need more fields…
}

type ProjectInfo {
	projectID: ID!
}

type CohortInfo {
	projectInfo: ProjectInfo
	cohortID: ID!
	numberOfUsers: Int
}

type StageInfo {
	projectInfo: ProjectInfo
	cohortInfo: CohortInfo
	stageID: ID!
}

type UserInfo {
	userID: ID!
	cohortID: Int!
	projectID: ID!
	currentStage: StageInfo # In JSON schema used StageName but the type is not defined
	timeSpentInProject: Int!
}

type DurationInfo {
	duration: Int!
	durationTimeInfo: DateTimeInfo
}

type DateTimeInfo {
	startDate: Date!
	endDate: Date!
}

type GoalInfo {
	goals: Goals
	goalNumericalType: GoalNumericalType
	target: Target
}

type TargetInfoAbsolute {
	goalAbsolute: Int
	targetDate: Date
}

type TargetInfoPercentage {
	goalPercentageCompleted: Float
	targetDate: Date
}

type StatisticsInfo {
	status: Status
	userCompletionInfo: UserCompletionInfo
	totals: TotalUsersInfo
}

type UserCompletionInfo {
	percentageCompleted: Float
	percentageNotCompleted: Float
	absoluteCompleted: Int
	absoluteNotCompleted: Int
}

type TotalUsersInfo {
	totalUsersEntered: Float
	totalUsersEarlyExited: Float
	totalUsersCompleted: Float
}

type FlowRun {
	flowType: FlowType
	flowVersion: Int
	overallStatus: Status!
	flow: String!
}

type GoalNumericalType {
	percentage: Float
	absolute: Int
}

type Target {
	targetInfoAbsolute: TargetInfoAbsolute
	targetInfoPercentage: TargetInfoPercentage
}

enum ComponentType {
	BUTTON
	LINK
	RADIO_BUTTON
	TEXT
	IMAGE
	VIDEO
	FORM
	INPUT
	DROPDOWN
	CHECKBOX
	SLIDER
	DATE_PICKER
	TIME_PICKER
	MAP
	CHART
	TABLE
	LIST
	CAROUSEL
	MODAL
	TOOLTIP
	POPUP
	NOTIFICATION
	LOADING
	NAVIGATION
	SEARCH
	FILTER
	PAGINATION
	SORT
	PROFILE
	SETTINGS
	HELP
	FAQ
	SUPPORT
	CONTACT
	ABOUT
	TERMS
	PRIVACY
	POLICY
}

enum Status {
	PASS
	FAIL
	IN_PROGRESS
	CANCELLED
}

enum FlowType {
	PRODUCT_MAGIC
	BETA_USERS
	LANDING_PAGE_CONVERSION_RATE
	AFTER_RELEASE_100_USERS
	USERS_100
	PEOPLE_INVITED_100
	PEOPLE_ACCEPT_INVITATIONS_100
}

enum Goals {
	CONVERSION_RATE_50
	CONVERSION_RATE_60
	CONVERSION_RATE_70
	CONVERSION_RATE_80
	BOUNCE_RATE_10
	BOUNCE_RATE_5
	BOUNCE_RATE_1
	CUSTOMER_ACQUISITION_COST_MARKETING
	CUSTOMER_ACQUISITION_COST_SALES
	CHANNEL_EFFECTIVENwESS_DRIVE_TRAFFIC # Measures the success of acquisition via this channel
	CHANNEL_EFFECTIVENESS_SIGNUPS
	CHANNEL_EFFECTIVENESS_PURCHASES
}

enum View {
	SCREEN_NAME
	WEB_PAGE
}

enum StageType {
	CONVERSION_RATE_
	INVITATION
	SOCIAL_MEDIA_POST
	ADVERTISEMENT
	LANDING_PAGE
	JTBD
	INTERVIEW
	NOMINAL_PAID_ACQUISITION
	SIGNUP
	LOGIN
	CONVERSION_RATE
	D7
	D30
	VIRAL_REFERRAL_RATE
	ENGAGEMENT
	MONETIZATION
}

type projectFlowStageStats {
    projectID: ID!
    startDate: String!
    endDate: String!
    duration: String!
    numberOfCohorts: Int!
    status: Status
    flowsRun: [FlowRun]
}

type secondProjectFlowStageStats {
    projectID: String!
    cohortID: String!
    stageID: String!
    durationInfo: DurationInfo
    statisticsInfo: StatisticsInfo
    signup: String
    d7: String
    d30:String
    engagement: String
    viralReferrals: String
    monetization: String
}

type FlowRun {
    flowType: FlowType
    flowVersion: Int
    overallStatus: Status!
    flow: String!
}


scalar Date

type DurationInfo {
    duration: Int!
    durationTimeInfo: DateTimeInfo
}

type DateTimeInfo {
    startDate:  Date!
    endDate: Date!
}

type StatisticsInfo {
    status: Status
    userCompletionInfo: UserCompletionInfo
    totals: TotalUsersInfo
}

type UserCompletionInfo {
    percentageCompleted: Float
    percentageNotCompleted: Float
    absoluteCompleted: Int
    absoluteNotCompleted: Int
}

type TotalUsersInfo {
    totalUsersEntered: Float
    totalUsersEarlyExited: Float
    totalUsersCompleted: Float
}

type cohortFlowStats {
    flowType: FlowType
    projectID: String!
    cohortID: String!
    stageID: String!
    durationInfo: DurationInfo
    statisticsInfo: StatisticsInfo
    stageInfos: [StageInfo]
}

type CohortFlowSummary {
	softwareRelease: String!
	cohortID: ID!
	durationInfo: DurationInfo
	numberOfUsers: Int!
	status: Status
	graphs: [Graph]
	dashboard: [Dashboard]
	ghStageStatus: 
}

type StageInfo {
    projectInfo: ProjectInfo
    cohortInfo: CohortInfo
    stageInfo: StageInfo
    stageID: String!
}

type cohortStageStats {
    cohortInfo: CohortInfo
    durationInfo: DurationInfo
    overallStatus: OverallStatusInfo
    goalInfo: GoalInfo
    statisticsInfo: StatisticsInfo
    userStageInfos: [UserStageInfo]
}

type CohortInfo {
    projectInfo: ProjectInfo
    cohortID: String!
    numberOfUsers: Int
}

type secondCohortInfo {
    projectID: String!
    cohortID: String!
}

type OverallStatusInfo {
    cohortInfo: CohortInfo
    durationInfo: DurationInfo
    statisticsInfo: StatisticsInfo
    userStageInfos: [UserStageInfo]
}

type GoalInfo {
    goals: Goals
    goalNumericalType: GoalNumericalType
    target: Target
}

type GoalNumericalType {
    percentage: Float
    absolute: Int
}

type Target {
    targetInfoAbsolute: TargetInfoAbsolute
    targetInfoPercentage: TargetInfoPercentage
}

type TargetInfoAbsolute {
    goalAbsolute: Int
    targetDate: Date
}

type TargetInfoPercentage {
    goalPercentageCompleted: Float
    targetDate: Date
}

type ProjectInfo{
    projectID: ID!
}

type secondCohortStageStats {
    cohortInfo: CohortInfo
    durationInfo: DurationInfo
    overallStatus: OverallStatusInfo
    goalInfo: GoalInfo
    statisticsInfo: StatisticsInfo
    usersStageInfos: UsersStageInfo
    userStageInfoLink: String!
}


# What did all users do in one stage
# for all user in one view (screen or web page) in one flow, column view
type UsersStageInfo {
    cohortInfo: CohortInfo
    durationInfo: DurationInfo    
    statisticsInfo: StatisticsInfo
    userStageInfo: [UserStageInfo]
}

# for one user and one view (screen or web page)
type UserStageInfo {
    stageInfo: StageInfo
    duration: DurationInfo
    goalInfo: GoalInfo
    viewInfo: [ViewInfo]
}

type ViewInfo {
    view: View
    visits: [VisitsInfo]
    overallDuration: DateTimeInfo
    goalInfo: GoalInfo
}

# VisitInfo tracks the visits to a View
# Use to create a graph view of the user path through the app

type VisitsInfo {
    componentInfos: [ComponentInfo]
    duration: DateTimeInfo
}

type ComponentInfo {
    view: View
    componentID:ID # this is the ID assigned to the component by the app
    duration: DateTimeInfo
    componentType: ComponentType
    action: String # What did the user do? E.g. pressed a button, selected a particular radio button, pressed a link
    nextView: View # if they exited the view from this component where did they go, the graph edge.
    # Need more fields…
}

